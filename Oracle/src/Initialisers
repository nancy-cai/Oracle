Order of Initialization of a class:
1. Static constants, variables and blocks;
2. Non-static ...;
3. Constructors.

public class Sequence {

Sequence() { System.out.print(¡°c ¡°); }// This is a constructor, not a method.

{ System.out.print(¡°y ¡°); } //initialization block.

public static void main(String[] args) {

new Sequence().go();

}

void go() { System.out.print(¡°g ¡°); }

static { System.out.print(¡°x ¡°); }

}

//This:

static {
        System.out.print("x ");
    }
is a static initialization block, and is called when the class is loaded. 
You can have as many of them in your class as you want, and they will be executed 
in order of their appearance (from top to bottom).

This:

    {
        System.out.print("y ");
    }
is an initialization block, and the code is copied into the beginning of each 
constructor of the class. So if you have many constructors of your class, 
and they all need to do something common at their beginning, you only need to 
write the code once and put it in an initialization block like this.
